---
import { Code } from "astro/components";
interface Props {
  img: string;
  resume: string;
}

const { img, resume } = Astro.props as Props;
---

<div
  class="hero min-h-screen bg-cover bg-center bg-fixed relative"
  style={`background-image: url(${img});`}
>
  <a
    class="absolute bottom-0 pt-2 pb-4 w-full group flex justify-center z-10 text-primary-content"
    href="#About"
    aria-label="Scroll to main section"
  >
    <i
      class="ti ti-chevron-down text-4xl group-hover:translate-y-2 group-hover:text-accent duration-300"
    ></i>
  </a>
  <div class="hidden">Image by rawpixel.com on Freepik</div>
  <!-- <div class="hero min-h-screen bg-cover bg-center bg-fixed relative"> -->
  <canvas
    class="hero-bg hero-overlay bg-opacity-10 w-full h-full z-0 bg-secondary"
  ></canvas>
  <div class="hero-overlay bg-opacity-0 z-0"></div>
  <div
    class="hero-content w-10/12 text-neutral-content z-3"
    role="region"
    aria-label="Hello world! I am Thang Pham, a Software Engineer, a CS student, and a Vietnamese"
  >
    <div class="max-w-3xl w-full font-bold text-base">
      <div class="">
        <div class="mb-4 text-4xl sm:text-5xl lg:text-6xl">Hello world!</div>
        <div class="mb-4 text-2xl sm:text-4xl lg:text-5xl">
          I am Thang Pham,
        </div>
        <div class="mb-8 text-2xl sm:text-4xl lg:text-5xl">
          a <span id="typewriter"></span>
        </div>
      </div>
      <a
        href={resume}
        class="btn btn-primary group pl-4 pr-[10px] items-center gap-1"
        target="_blank"
        rel="noreferrer"
        role="button"
        aria-label="view my resume"
        aria-expanded="false"
      >
        <span>My resume</span>
        <i
          class="ti ti-arrow-narrow-right text-2xl -translate-y-[1px] group-hover:translate-x-6 transition-all duration-300 ease-in-out"
        ></i>
      </a>
    </div>
  </div>
</div>

<style></style>

<script>
  import Typewriter from "typewriter-effect/dist/core";
  import * as THREE from "three";
  import { FBXLoader } from "three/examples/jsm/loaders/FBXLoader";

  import { RoomEnvironment } from "../utils/RoomEnvironment";

  new Typewriter("#typewriter", {
    strings: ["Software Engineer", "CS student", "Vietnamese"],
    autoStart: true,
    loop: true,
    // cursor: "_",
  });

  const setPosition = (obj, position: Number[]) => {
    obj.position.x = position[0];
    obj.position.y = position[1];
    obj.position.z = position[2];
  };

  const setRotation = (obj, rotation: Number[]) => {
    obj.rotation.x = rotation[0];
    obj.rotation.y = rotation[1];
    obj.rotation.z = rotation[2];
  };

  const canvas = document.querySelector(".hero-bg") as HTMLCanvasElement;
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  camera.position.z = 24;
  const renderer = new THREE.WebGLRenderer({
    canvas,
    alpha: true,
    antialias: true,
  });
  renderer.setClearColor(0x000000, 0);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;

  const scene = new THREE.Scene();
  const pmremGenerator = new THREE.PMREMGenerator(renderer);
  // scene.environment = pmremGenerator.fromScene(
  //   new RoomEnvironment(),
  //   0.04
  // ).texture;
  const light = new THREE.DirectionalLight(0xffffff, 2.4);
  light.position.set(-6, 10, 10);
  scene.add(light);

  const ambientLight = new THREE.AmbientLight(0xffffff);
  scene.add(ambientLight);

  renderer.setSize(window.innerWidth, window.innerHeight);
  camera.lookAt(scene.position);

  renderer.render(scene, camera);

  const loader = new FBXLoader();
  let model;
  let screen;
  let modelInitialRotation = [0.5, -1, 0];
  let screenInitialRotation = [0, Math.PI, 0];
  let modelInitialPosition = [6, -10, -16];

  loader.load(
    "/laptop/source/Laptop.fbx",
    (object) => {
      model = object;
      setPosition(model, modelInitialPosition);
      setRotation(model, modelInitialRotation);
      model.traverse((child) => {
        if (child instanceof THREE.Mesh) {
          if (child.name === "Frame") {
            child.material.roughness = 0.5;
          }
          if (child.name === "Screen") {
            child.material.roughness = 0.5;
            child.material.metalness = 0.5;
            screen = child;
            setRotation(child, screenInitialRotation);
          }
        }
      });
      scene.add(model);
    },
    (xhr) => {
      console.log((xhr.loaded / xhr.total) * 100 + "% loaded");
    },
    (error) => {
      console.log(error);
    }
  );

  const clock = new THREE.Clock();
  function animate() {
    // setPosition(torus2, [
    //   torus2InitialPosition[0],
    //   torus2InitialPosition[1] + Math.cos(clock.getElapsedTime()),
    //   torus2InitialPosition[2],
    // ]);
    model &&
      setPosition(model, [
        modelInitialPosition[0],
        modelInitialPosition[1] + Math.cos(clock.getElapsedTime()),
        modelInitialPosition[2],
      ]);
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  document.addEventListener("scroll", () => {
    const y = window.scrollY;

    setRotation(screen, [
      screenInitialRotation[0] + Math.min(y / 300, Math.PI / 2),
      screenInitialRotation[1],
      screenInitialRotation[2],
    ]);

    setRotation(model, [
      modelInitialRotation[0],
      modelInitialRotation[1] + y * 0.001,
      modelInitialRotation[2],
    ]);
  });
</script>
