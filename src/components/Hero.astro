---
interface Props {
  img: string;
  resume: string;
}

const { img, resume } = Astro.props as Props;
---

<div
  class="hero min-h-screen bg-cover bg-center bg-fixed relative"
  style={`background-image: url(${img});`}
>
  <a
    class="absolute bottom-0 pt-2 pb-4 w-full group flex justify-center z-10"
    href="#About"
    aria-label="Scroll to main section"
  >
    <i
      class="ti ti-chevron-down text-4xl group-hover:translate-y-2 group-hover:text-accent duration-300"
    ></i>
  </a>
  <div class="hidden">Image by rawpixel.com on Freepik</div>
  <!-- <div class="hero min-h-screen bg-cover bg-center bg-fixed relative"> -->
  <canvas
    class="hero-bg hero-overlay bg-opacity-10 w-full h-full z-0 bg-secondary"
  ></canvas>
  <div class="hero-overlay bg-opacity-0 z-0"></div>
  <div
    class="hero-content w-10/12 text-neutral-content z-3"
    role="region"
    aria-label="Hello world! I am Thang Pham, a Software Engineer, a CS student, and a Vietnamese"
  >
    <div class="max-w-4xl w-full font-bold text-base">
      <div class="">
        <div class="mb-4 text-4xl sm:text-5xl lg:text-6xl">Hello world!</div>
        <div class="mb-4 text-2xl sm:text-4xl lg:text-5xl">
          I am Thang Pham,
        </div>
        <div class="mb-8 text-2xl sm:text-4xl lg:text-5xl">
          a <span id="typewriter"></span>
        </div>
      </div>
      <a
        href={resume}
        class="btn btn-primary group pl-4 pr-[10px] items-center gap-1"
        target="_blank"
        rel="noreferrer"
        role="button"
        aria-label="view my resume"
        aria-expanded="false"
      >
        <span>My resume</span>
        <i
          class="ti ti-arrow-narrow-right text-2xl -translate-y-[1px] group-hover:translate-x-6 transition-all duration-300 ease-in-out"
        ></i>
      </a>
    </div>
  </div>
</div>

<style></style>

<script>
  import Typewriter from "typewriter-effect/dist/core";
  import * as THREE from "three";

  import { RoomEnvironment } from "../utils/RoomEnvironment";

  new Typewriter("#typewriter", {
    strings: ["Software Engineer", "CS student", "Vietnamese"],
    autoStart: true,
    loop: true,
    // cursor: "_",
  });

  const setPosition = (obj, position: Number[]) => {
    obj.position.x = position[0];
    obj.position.y = position[1];
    obj.position.z = position[2];
  };

  const setRotation = (obj, rotation: Number[]) => {
    obj.rotation.x = rotation[0];
    obj.rotation.y = rotation[1];
    obj.rotation.z = rotation[2];
  };

  const canvas = document.querySelector(".hero-bg") as HTMLCanvasElement;
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  camera.position.z = 24;
  const renderer = new THREE.WebGLRenderer({
    canvas,
    alpha: true,
  });
  const scene = new THREE.Scene();
  const pmremGenerator = new THREE.PMREMGenerator(renderer);
  scene.environment = pmremGenerator.fromScene(
    new RoomEnvironment(),
    0.04
  ).texture;
  renderer.setSize(window.innerWidth, window.innerHeight);
  camera.lookAt(scene.position);

  renderer.render(scene, camera);

  const geometry2 = new THREE.TorusKnotGeometry(7, 2, 200, 32);

  const material2 = new THREE.MeshStandardMaterial({
    color: 0x8e5343,
    roughness: 0,
    metalness: 1,
  });

  const torus2 = new THREE.Mesh(geometry2, material2);

  console.log(window.matchMedia("(max-width: 600px)").matches);
  const torus2InitialPosition = [10, 0, 0];
  const torus2InitialRotation = [0, 0.8, 0.8];

  setPosition(torus2, torus2InitialPosition);
  setRotation(torus2, torus2InitialRotation);
  scene.add(torus2);

  const ambientLight = new THREE.AmbientLight(0xffffff);
  scene.add(ambientLight);

  // const pointLight = new THREE.PointLight(0xffffff, 1);
  // setPosition(pointLight, [0, 0, 0]);
  // scene.add(pointLight);

  let t = 0;
  function animate() {
    // setRotation(torus2, [
    //   torus2.rotation.x + 0.003,
    //   torus2.rotation.y + 0.003,
    //   torus2.rotation.z + 0.002,
    // ]);
    setPosition(torus2, [
      torus2InitialPosition[0],
      torus2InitialPosition[1] + Math.sin(t),
      torus2InitialPosition[2],
    ]);
    t = t + 0.01;
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  // window.addEventListener("mousemove", (e) => {
  //   const x = e.clientX / window.innerWidth;
  //   const y = e.clientY / window.innerHeight;
  //   setPosition(pointLight, [
  //     (x - 0.5) * 100,
  //     (y - 0.5) * 100,
  //     pointLight.position.z,
  //   ]);
  // });

  document.addEventListener("scroll", () => {
    const y = window.scrollY;
    // setPosition(torus2, [
    //   torus2InitialPosition[0],
    //   torus2InitialPosition[1] + y / 60,
    //   torus2InitialPosition[2],
    // ]);

    setRotation(torus2, [
      torus2InitialRotation[0] + y / 300,
      torus2InitialRotation[1] + y / 200,
      torus2InitialRotation[2],
    ]);
  });
</script>
