---
import { Code } from "astro/components";
interface Props {
  img: string;
  resume: string;
}

const { resume } = Astro.props as Props;
---

<div class="hero max-h-fit bg-[#0b1121] relative">
  <a
    class="absolute bottom-0 pt-2 pb-4 w-full group flex justify-center z-10 text-primary-content"
    href="#About"
    aria-label="Scroll to main section"
  >
    <i
      class="ti ti-chevron-down text-4xl group-hover:translate-y-2 group-hover:text-accent duration-300"
    ></i>
  </a>
  <canvas class="hero-bg w-full"></canvas>
  <div
    id="hero-gradient-wrapper"
    class="hero-overlay bg-transparent absolute top-0 left-0 w-1/2 h-3/4"
  >
    <div
      id="hero-gradient-shape"
      class="w-full h-full opacity-50 bg-[radial-gradient(ellipse_at_bottom_left,_var(--tw-gradient-stops))] from-green-300 to-purple-400"
    >
      HELLO WORLD
    </div>
  </div>
  <div
    class="hero-content w-10/12 text-neutral-content z-3"
    role="region"
    aria-label="Hello world! I am Thang Pham, a Software Engineer, a CS student, and a Vietnamese."
  >
    <div class="max-w-3xl w-full">
      <div class="font-mono">
        <div class="mb-3 text-xl sm:text-3xl lg:text-4xl">Hello world!</div>
        <div class="mb-3 text-xl sm:text-3xl lg:text-4xl">I am Thang Pham,</div>
        <div class="mb-3 text-xl sm:text-3xl lg:text-4xl">
          a <span id="typewriter"></span>
        </div>
      </div>
      <a
        href={resume}
        class="group btn btn-sm btn-link p-0 text-neutral-content no-underline hover:no-underline items-center gap-1"
        target="_blank"
        rel="noreferrer"
        role="button"
        aria-label="view my resume"
      >
        <span class="text-base transition-colors group-hover:text-secondary">
          My resume
        </span>
        <i
          class="ti ti-arrow-narrow-right text-2xl group-hover:translate-x-4 group-hover:text-secondary transition-[color_0ms,transform_300ms] ease-in-out"
        ></i>
      </a>
    </div>
  </div>
</div>

<style>
  #hero-gradient-wrapper {
    filter: blur(64px);
  }

  #hero-gradient-shape {
    clip-path: polygon(
      36% 100%,
      36% 58%,
      100% 0,
      82% 36%,
      100% 100%,
      47% 0,
      0 100%,
      0 0
    );
  }
</style>

<script>
  import Typewriter from "typewriter-effect/dist/core";
  import * as THREE from "three";
  import { FBXLoader } from "three/examples/jsm/loaders/FBXLoader";

  new Typewriter("#typewriter", {
    strings: ["Software Engineer,", "CS student,", "Vietnamese."],
    autoStart: true,
    loop: true,
    cursor: "_",
  });

  const setPosition = (obj: THREE.Object3D, position: Number[]) => {
    if (!obj) return;
    obj.position.x = position[0];
    obj.position.y = position[1];
    obj.position.z = position[2];
  };

  const setRotation = (obj: THREE.Object3D, rotation: Number[]) => {
    if (!obj) return;
    obj.rotation.x = rotation[0];
    obj.rotation.y = rotation[1];
    obj.rotation.z = rotation[2];
  };

  const canvas = document.querySelector(".hero-bg") as HTMLCanvasElement;
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  camera.position.z = 24;
  const renderer = new THREE.WebGLRenderer({
    canvas,
    alpha: true,
    antialias: true,
  });
  renderer.setClearColor(0x000000, 0);
  renderer.setPixelRatio(window.devicePixelRatio);

  const scene = new THREE.Scene();
  // const pmremGenerator = new THREE.PMREMGenerator(renderer);
  // scene.environment = pmremGenerator.fromScene(
  //   new RoomEnvironment(),
  //   0.04
  // ).texture;
  const light = new THREE.DirectionalLight(0xffffff, 2.4);
  light.position.set(-6, 10, 10);
  scene.add(light);

  const ambientLight = new THREE.AmbientLight(0xffffff);
  scene.add(ambientLight);

  renderer.setSize(window.innerWidth, window.innerHeight);
  camera.lookAt(scene.position);

  renderer.render(scene, camera);

  const loader = new FBXLoader();
  let model: THREE.Group;
  let screen: THREE.Mesh;
  let modelInitialRotation = [0.5, -1, 0];
  let screenInitialRotation = [0, Math.PI, 0];
  let modelInitialPosition = [6, -10, -20];

  loader.load(
    "/laptop/source/Laptop.fbx",
    (object: THREE.Group) => {
      model = object;
      setPosition(model, modelInitialPosition);
      setRotation(model, modelInitialRotation);
      model.traverse((child) => {
        if (child instanceof THREE.Mesh) {
          if (child.name === "Frame") {
            child.material.roughness = 0.5;
          }
          if (child.name === "Screen") {
            child.material.roughness = 0.5;
            child.material.metalness = 0.5;
            screen = child;
            setRotation(child, screenInitialRotation);
          }
        }
      });
      scene.add(model);
    },
    (xhr: ProgressEvent) => {
      console.log((xhr.loaded / xhr.total) * 100 + "% loaded");
    },
    (error: ErrorEvent) => {
      console.log(error);
    }
  );

  const clock = new THREE.Clock();
  function animate() {
    // setPosition(torus2, [
    //   torus2InitialPosition[0],
    //   torus2InitialPosition[1] + Math.cos(clock.getElapsedTime()),
    //   torus2InitialPosition[2],
    // ]);
    model &&
      setPosition(model, [
        modelInitialPosition[0],
        modelInitialPosition[1] + Math.cos(clock.getElapsedTime()),
        modelInitialPosition[2],
      ]);
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  // window.addEventListener("resize", () => {
  //   camera.aspect = window.innerWidth / window.innerHeight;
  //   camera.updateProjectionMatrix();
  //   renderer.setSize(window.innerWidth, window.innerHeight);
  // });

  document.addEventListener("scroll", () => {
    const y = window.scrollY;

    setRotation(screen, [
      screenInitialRotation[0] + Math.min(y / 300, Math.PI / 2),
      screenInitialRotation[1],
      screenInitialRotation[2],
    ]);

    setRotation(model, [
      modelInitialRotation[0],
      modelInitialRotation[1] + y * 0.001,
      modelInitialRotation[2],
    ]);
  });
</script>
