---
interface Props {
  img: string;
  resume: string;
}

const { img, resume } = Astro.props as Props;
---

<div
  class="hero min-h-screen bg-cover bg-center bg-fixed relative"
  style={`background-image: url(${img});`}
>
  <div class="hidden">Image by rawpixel.com on Freepik</div>
  <!-- <div class="hero min-h-screen bg-cover bg-center bg-fixed relative"> -->
  <canvas
    class="hero-bg hero-overlay bg-opacity-10 w-full h-full z-0 bg-secondary"
  ></canvas>
  <div class="hero-overlay bg-opacity-40 z-0"></div>
  <div class="hero-content w-10/12 text-neutral-content z-3">
    <div class="max-w-2xl w-full font-bold text-white">
      <div class="opacity-70">
        <div class="mb-4 text-4xl sm:text-5xl lg:text-6xl">Hello world!</div>
        <div class="mb-4 text-2xl sm:text-4xl lg:text-5xl">
          I am Thang Pham,
        </div>
        <div class="mb-8 text-2xl sm:text-4xl lg:text-5xl">
          a <span id="typewriter"></span>
        </div>
      </div>
      <a href={resume} target="_blank" rel="noreferrer" role="button">
        <button class="btn btn-primary group pl-4 pr-[4px] items-center gap-1">
          <span>My resume</span>
          <i
            class="ti ti-arrow-narrow-right text-2xl -translate-y-[1px] group-hover:translate-x-4 transition-all duration-300 ease-in-out"
          ></i></button
        >
      </a>
    </div>
  </div>
  <a
    class="absolute bottom-0 pt-2 pb-4 w-full group flex justify-center"
    href="#About"
  >
    <i
      class="ti ti-chevron-down text-4xl group-hover:translate-y-2 group-hover:text-accent duration-300"
    ></i>
  </a>
</div>

<style></style>

<script>
  import Typewriter from "typewriter-effect/dist/core";
  import * as THREE from "three";

  import { RoomEnvironment } from "../utils/RoomEnvironment";

  new Typewriter("#typewriter", {
    strings: ["Software Engineer", "CS student", "Vietnamese"],
    autoStart: true,
    loop: true,
    // cursor: "_",
  });

  const setPosition = (obj, position) => {
    obj.position.x = position[0];
    obj.position.y = position[1];
    obj.position.z = position[2];
  };

  const setRotation = (obj, rotation) => {
    obj.rotation.x = rotation[0];
    obj.rotation.y = rotation[1];
    obj.rotation.z = rotation[2];
  };

  const canvas = document.querySelector(".hero-bg") as HTMLCanvasElement;
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  const renderer = new THREE.WebGLRenderer({
    canvas,
    alpha: true,
  });
  const scene = new THREE.Scene();
  // scene.environment = new THREE.CubeTextureLoader().load([
  //   "px.png",
  //   "nx.png",
  //   "py.png",
  //   "ny.png",
  //   "pz.png",
  //   "nz.png",
  // ]);
  const pmremGenerator = new THREE.PMREMGenerator(renderer);
  scene.environment = pmremGenerator.fromScene(
    new RoomEnvironment(),
    0.04
  ).texture;
  renderer.setSize(window.innerWidth, window.innerHeight);
  setPosition(camera, [0, 80, 30]);
  camera.lookAt(scene.position);

  renderer.render(scene, camera);

  const gridSize = 400;
  const gridDivisions = 28;
  const gridColor = 0x708090;

  const gridHelper = new THREE.GridHelper(
    gridSize,
    gridDivisions,
    gridColor,
    gridColor
  );
  scene.add(gridHelper);

  const geometry1 = new THREE.TorusKnotGeometry(10, 3, 100, 16, 3, 2);
  const geometry2 = new THREE.TorusKnotGeometry(14, 4, 100, 16);
  const geometry3 = new THREE.DodecahedronGeometry(6, 0);

  const material1 = new THREE.MeshStandardMaterial({
    color: 0x6495ed,
    roughness: 0,
    metalness: 1,
  });

  const material2 = new THREE.MeshStandardMaterial({
    color: 0xfca311,
    roughness: 0,
    metalness: 1,
  });
  const material3 = new THREE.MeshStandardMaterial({
    color: 0x6495ed,
  });

  const torus1 = new THREE.Mesh(geometry1, material1);
  const torus2 = new THREE.Mesh(geometry2, material2);
  const dodecahedron = new THREE.Mesh(geometry3, material3);

  // const torus1InitialPosition = [-20, -6, 0];
  const torus1InitialPosition = [-19, 50, 26];
  const torus1InitialRotation = [90, 90, 0];
  // const torus2InitialPosition = [24, 0, -10];
  const torus2InitialPosition = [24, 40, 14];
  const torus2InitialRotation = [0, 0, 0];

  const dodecahedronInitialPosition = [0, 0, 0];
  const dodecahedronInitialRotation = [0, 0, 0];

  setPosition(torus1, torus1InitialPosition);
  setRotation(torus1, torus1InitialRotation);
  scene.add(torus1);

  setPosition(torus2, torus2InitialPosition);
  setRotation(torus2, torus2InitialRotation);
  scene.add(torus2);

  setPosition(dodecahedron, dodecahedronInitialPosition);
  setRotation(dodecahedron, dodecahedronInitialRotation);
  // scene.add(dodecahedron);

  const ambientLight = new THREE.AmbientLight(0xffffff);
  scene.add(ambientLight);

  function animate() {
    torus1.rotation.x += 0.003;
    torus1.rotation.y += 0.004;
    torus1.rotation.z += 0.002;

    torus2.rotation.x += 0.003;
    torus2.rotation.y += 0.004;
    torus2.rotation.z += 0.002;
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  // window.addEventListener("mousemove", (e) => {
  //   const x = e.clientX / window.innerWidth;
  //   const y = e.clientY / window.innerHeight;
  //   setPosition(camera, [x * 40 - 20, y * 40 - 20, 0]);
  //   camera.lookAt(scene.position);
  // });

  document.addEventListener("scroll", () => {
    const y = window.scrollY;
    setPosition(torus1, [
      torus1InitialPosition[0],
      torus1InitialPosition[1],
      torus1InitialPosition[2] - y / 40,
    ]);
    setPosition(torus2, [
      torus2InitialPosition[0],
      torus2InitialPosition[1],
      torus2InitialPosition[2] + y / 40,
    ]);

    // setRotation(torus1, [
    //   torus1InitialRotation[0] + y / 110,
    //   torus1InitialRotation[1] + y / 100,
    //   torus1InitialRotation[2] + y / 800,
    // ]);
    // setRotation(torus2, [
    //   torus2InitialRotation[0] - y / 90,
    //   torus2InitialRotation[1] - y / 700,
    //   torus2InitialRotation[2] + y / 60,
    // ]);
  });
</script>
